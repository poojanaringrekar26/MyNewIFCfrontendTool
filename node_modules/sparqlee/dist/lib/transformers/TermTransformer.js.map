{"version":3,"file":"TermTransformer.js","sourceRoot":"","sources":["../../../lib/transformers/TermTransformer.ts"],"names":[],"mappings":"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","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport * as RDFString from 'rdf-string';\nimport type { Algebra as Alg } from 'sparqlalgebrajs';\nimport { Algebra } from 'sparqlalgebrajs';\nimport * as E from '../expressions';\nimport { TypeURL } from '../util/Consts';\nimport * as Err from '../util/Errors';\nimport { isExpressionError } from '../util/Errors';\nimport {\n  parseDate,\n  parseDateTime,\n  parseDayTimeDuration,\n  parseDuration,\n  parseTime,\n  parseYearMonthDuration,\n} from '../util/Parsing';\nimport * as P from '../util/Parsing';\nimport { getSuperTypeDict } from '../util/TypeHandling';\nimport type { ISuperTypeProvider,\n  GeneralSuperTypeDict } from '../util/TypeHandling';\n\nexport interface ITermTransformer {\n  transformRDFTermUnsafe: (term: RDF.Term) => E.Term;\n  transformLiteral: (lit: RDF.Literal) => E.Literal<any>;\n}\n\nexport class TermTransformer implements ITermTransformer {\n  public constructor(protected readonly superTypeProvider: ISuperTypeProvider) { }\n\n  /**\n   * Transforms an RDF term to the internal representation of a term,\n   * assuming it is not a variable, which would be an expression (internally).\n   *\n   * @param term RDF term to transform into internal representation of a term\n   */\n  public transformRDFTermUnsafe(term: RDF.Term): E.Term {\n    return <E.Term> this.transformTerm({\n      term,\n      type: Algebra.types.EXPRESSION,\n      expressionType: Algebra.expressionTypes.TERM,\n    });\n  }\n\n  protected transformTerm(term: Alg.TermExpression): E.Expression {\n    if (!term.term) {\n      throw new Err.InvalidExpression(term);\n    }\n\n    switch (term.term.termType) {\n      case 'Variable':\n        return new E.Variable(RDFString.termToString(term.term));\n      case 'Literal':\n        return this.transformLiteral(term.term);\n      case 'NamedNode':\n        return new E.NamedNode(term.term.value);\n      case 'BlankNode':\n        return new E.BlankNode(term.term.value);\n      default:\n        throw new Err.InvalidTermType(term);\n    }\n  }\n\n  /**\n   * @param lit the rdf literal we want to transform to an internal Literal expression.\n   */\n  public transformLiteral(lit: RDF.Literal): E.Literal<any> {\n    // Both here and within the switch we transform to LangStringLiteral or StringLiteral.\n    // We do this when we detect a simple literal being used.\n    // Original issue regarding this behaviour: https://github.com/w3c/sparql-12/issues/112\n    if (!lit.datatype || [ null, undefined, '' ].includes(lit.datatype.value)) {\n      return lit.language ?\n        new E.LangStringLiteral(lit.value, lit.language) :\n        new E.StringLiteral(lit.value);\n    }\n\n    const dataType = lit.datatype.value;\n    const superTypeDict: GeneralSuperTypeDict = getSuperTypeDict(dataType, this.superTypeProvider);\n\n    // The order of checking matters! Check most specific types first!\n    try {\n      if (TypeURL.XSD_STRING in superTypeDict) {\n        return new E.StringLiteral(lit.value, dataType);\n      }\n      if (TypeURL.RDF_LANG_STRING in superTypeDict) {\n        return new E.LangStringLiteral(lit.value, lit.language);\n      }\n      if (TypeURL.XSD_YEAR_MONTH_DURATION in superTypeDict) {\n        return new E.YearMonthDurationLiteral(parseYearMonthDuration(lit.value), lit.value, dataType);\n      }\n      if (TypeURL.XSD_DAY_TIME_DURATION in superTypeDict) {\n        return new E.DayTimeDurationLiteral(parseDayTimeDuration(lit.value), lit.value, dataType);\n      }\n      if (TypeURL.XSD_DURATION in superTypeDict) {\n        return new E.DurationLiteral(parseDuration(lit.value), lit.value, dataType);\n      }\n      if (TypeURL.XSD_DATE_TIME in superTypeDict) {\n        const dateVal: Date = new Date(lit.value);\n        if (Number.isNaN(dateVal.getTime())) {\n          return new E.NonLexicalLiteral(undefined, dataType, this.superTypeProvider, lit.value);\n        }\n        return new E.DateTimeLiteral(parseDateTime(lit.value), lit.value, dataType);\n      }\n      if (TypeURL.XSD_DATE in superTypeDict) {\n        return new E.DateLiteral(parseDate(lit.value), lit.value, dataType);\n      }\n      if (TypeURL.XSD_TIME in superTypeDict) {\n        return new E.TimeLiteral(parseTime(lit.value), lit.value, dataType);\n      }\n      if (TypeURL.XSD_BOOLEAN in superTypeDict) {\n        if (lit.value !== 'true' && lit.value !== 'false' && lit.value !== '1' && lit.value !== '0') {\n          return new E.NonLexicalLiteral(undefined, dataType, this.superTypeProvider, lit.value);\n        }\n        return new E.BooleanLiteral(lit.value === 'true' || lit.value === '1', lit.value);\n      }\n      if (TypeURL.XSD_DECIMAL in superTypeDict) {\n        const intVal: number | undefined = P.parseXSDDecimal(lit.value);\n        if (intVal === undefined) {\n          return new E.NonLexicalLiteral(undefined, dataType, this.superTypeProvider, lit.value);\n        }\n        if (TypeURL.XSD_INTEGER in superTypeDict) {\n          return new E.IntegerLiteral(intVal, dataType, lit.value);\n        }\n        // If type is not an integer it's just a decimal.\n        return new E.DecimalLiteral(intVal, dataType, lit.value);\n      }\n      const isFloat = TypeURL.XSD_FLOAT in superTypeDict;\n      const isDouble = TypeURL.XSD_DOUBLE in superTypeDict;\n      if (isFloat || isDouble) {\n        const doubleVal: number | undefined = P.parseXSDFloat(lit.value);\n        if (doubleVal === undefined) {\n          return new E.NonLexicalLiteral(undefined, dataType, this.superTypeProvider, lit.value);\n        }\n        if (isFloat) {\n          return new E.FloatLiteral(doubleVal, dataType, lit.value);\n        }\n        return new E.DoubleLiteral(doubleVal, dataType, lit.value);\n      }\n      return new E.Literal<string>(lit.value, dataType, lit.value);\n    } catch (error: unknown) {\n      if (error instanceof Error && isExpressionError(error)) {\n        return new E.NonLexicalLiteral(undefined, dataType, this.superTypeProvider, lit.value);\n      }\n      throw error;\n    }\n  }\n}\n"]}