{"version":3,"file":"ActorRdfMetadataAccumulateCardinality.js","sourceRoot":"","sources":["ActorRdfMetadataAccumulateCardinality.ts"],"names":[],"mappings":";;;AAEA,uFAAmF;AAInF;;GAEG;AACH,MAAa,qCAAsC,SAAQ,wDAA0B;IACnF,YAAmB,IAAqC;QACtD,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAAoC;QACpD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAAoC;QACnD,qCAAqC;QACrC,IAAI,MAAM,CAAC,IAAI,KAAK,YAAY,EAAE;YAChC,OAAO,EAAE,QAAQ,EAAE,EAAE,WAAW,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE,EAAC,EAAC,CAAC;SACjE;QAED,8CAA8C;QAC9C,MAAM,WAAW,GAA2B,EAAE,GAAG,MAAM,CAAC,mBAAmB,CAAC,WAAW,EAAE,CAAC;QAE1F,IAAI,WAAW,CAAC,OAAO,EAAE;YACvB,IAAI,MAAM,CAAC,iBAAiB,CAAC,WAAW,CAAC,OAAO,EAAE;gBAChD,iDAAiD;gBACjD,IAAI,WAAW,CAAC,OAAO,KAAK,MAAM,CAAC,iBAAiB,CAAC,WAAW,CAAC,OAAO;oBACtE,MAAM,CAAC,iBAAiB,CAAC,QAAQ,KAAK,WAAW,CAAC,OAAO,EAAE;oBAC3D,kEAAkE;oBAClE,qCAAqC;oBACrC,OAAO,EAAE,QAAQ,EAAE,EAAE,WAAW,EAAE,MAAM,CAAC,iBAAiB,CAAC,WAAW,EAAE,EAAC,CAAC;iBAC3E;gBACD,IAAI,WAAW,CAAC,OAAO,KAAK,MAAM,CAAC,iBAAiB,CAAC,WAAW,CAAC,OAAO,EAAE;oBACxE,0DAA0D;oBAC1D,6BAA6B;oBAC7B,OAAO,WAAW,CAAC,OAAO,CAAC;iBAC5B;qBAAM;oBACL,wDAAwD;oBACxD,8CAA8C;oBAC9C,OAAO,EAAE,QAAQ,EAAE,EAAE,WAAW,EAAE,EAAC,CAAC;iBACrC;aACF;iBAAM;gBACL,2DAA2D;gBAC3D,8CAA8C;gBAC9C,OAAO,EAAE,QAAQ,EAAE,EAAE,WAAW,EAAE,EAAC,CAAC;aACrC;SACF;QAED,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,WAAW,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,iBAAiB,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE;YACzG,0DAA0D;YAC1D,WAAW,CAAC,IAAI,GAAG,UAAU,CAAC;YAC9B,WAAW,CAAC,KAAK,GAAG,MAAM,CAAC,iBAAiB,CAAC;SAC9C;aAAM;YACL,IAAI,MAAM,CAAC,iBAAiB,CAAC,WAAW,CAAC,IAAI,KAAK,UAAU,EAAE;gBAC5D,WAAW,CAAC,IAAI,GAAG,UAAU,CAAC;aAC/B;YACD,WAAW,CAAC,KAAK,IAAI,MAAM,CAAC,iBAAiB,CAAC,WAAW,CAAC,KAAK,CAAC;SACjE;QAED,OAAO,EAAE,QAAQ,EAAE,EAAE,WAAW,EAAE,EAAC,CAAC;IACtC,CAAC;CACF;AAxDD,sFAwDC","sourcesContent":["import type { IActionRdfMetadataAccumulate, IActorRdfMetadataAccumulateOutput,\n  IActorRdfMetadataAccumulateArgs } from '@comunica/bus-rdf-metadata-accumulate';\nimport { ActorRdfMetadataAccumulate } from '@comunica/bus-rdf-metadata-accumulate';\nimport type { IActorTest } from '@comunica/core';\nimport type { QueryResultCardinality } from '@comunica/types';\n\n/**\n * A comunica Cardinality RDF Metadata Accumulate Actor.\n */\nexport class ActorRdfMetadataAccumulateCardinality extends ActorRdfMetadataAccumulate {\n  public constructor(args: IActorRdfMetadataAccumulateArgs) {\n    super(args);\n  }\n\n  public async test(action: IActionRdfMetadataAccumulate): Promise<IActorTest> {\n    return true;\n  }\n\n  public async run(action: IActionRdfMetadataAccumulate): Promise<IActorRdfMetadataAccumulateOutput> {\n    // Return default value on initialize\n    if (action.mode === 'initialize') {\n      return { metadata: { cardinality: { type: 'exact', value: 0 }}};\n    }\n\n    // Otherwise, attempt to update existing value\n    const cardinality: QueryResultCardinality = { ...action.accumulatedMetadata.cardinality };\n\n    if (cardinality.dataset) {\n      if (action.appendingMetadata.cardinality.dataset) {\n        // If the accumulated cardinality is dataset-wide\n        if (cardinality.dataset !== action.appendingMetadata.cardinality.dataset &&\n          action.appendingMetadata.subsetOf === cardinality.dataset) {\n          // If the appending cardinality refers to the subset of a dataset,\n          // use the cardinality of the subset.\n          return { metadata: { cardinality: action.appendingMetadata.cardinality }};\n        }\n        if (cardinality.dataset !== action.appendingMetadata.cardinality.dataset) {\n          // If the appending cardinality refers to another dataset,\n          // remove the dataset scopes.\n          delete cardinality.dataset;\n        } else {\n          // If the appending cardinality is for the same dataset,\n          // keep the accumulated cardinality unchanged.\n          return { metadata: { cardinality }};\n        }\n      } else {\n        // If the appending cardinality refers to a dataset subset,\n        // keep the accumulated cardinality unchanged.\n        return { metadata: { cardinality }};\n      }\n    }\n\n    if (!action.appendingMetadata.cardinality || !Number.isFinite(action.appendingMetadata.cardinality.value)) {\n      // We're already at infinite, so ignore any later metadata\n      cardinality.type = 'estimate';\n      cardinality.value = Number.POSITIVE_INFINITY;\n    } else {\n      if (action.appendingMetadata.cardinality.type === 'estimate') {\n        cardinality.type = 'estimate';\n      }\n      cardinality.value += action.appendingMetadata.cardinality.value;\n    }\n\n    return { metadata: { cardinality }};\n  }\n}\n"]}