{"version":3,"file":"MediatedQuadSource.js","sourceRoot":"","sources":["MediatedQuadSource.ts"],"names":[],"mappings":";;;AACA,+DAAsE;AAMtE,yGAAsG;AACtG,qEAAkE;AAElE;;;;GAIG;AACH,MAAa,kBAAkB;IAW7B,YAAmB,SAAiB,EAAE,QAAgB,EACpD,eAAmC,EAAE,YAAoB,EAAE,cAAuB,EAAE,SAAwB;QAC5G,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IAEM,MAAM,CAAC,gBAAgB,CAAC,IAAe;QAC5C,OAAO,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,KAAK,UAAU,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC;IAClE,CAAC;IAEM,KAAK,CACV,OAAiB,EACjB,SAAmB,EACnB,MAAgB,EAChB,KAAe,EACf,OAAuB;QAEvB,gEAAgE;QAChE,IAAI,eAA6C,CAAC;QAClD,IAAI,IAAI,CAAC,cAAc,EAAE;YACvB,MAAM,gBAAgB,GAAmD,OAAO;iBAC7E,GAAG,CAAC,2CAAyB,CAAC,iCAAiC,CAAC,CAAC;YACpE,IAAI,gBAAgB,EAAE;gBACpB,eAAe,GAAG,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACtD,IAAI,CAAC,eAAe,EAAE;oBACpB,eAAe,GAAG,IAAI,+CAAsB,CAC1C,SAAS,EACT,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC,kBAAkB,CAAC,GAAG,EAAE,GAAG,CAAC,CAC9C,CAAC;oBACF,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,eAAe,CAAC,CAAC;iBACtD;gBACD,IAAI,eAAe,CAAC,OAAO,EAAE;oBAC3B,OAAO,eAAe,CAAC,KAAK,CAC1B,kBAAkB,CAAC,gBAAgB,CAAC,OAAO,CAAC,EAC5C,kBAAkB,CAAC,gBAAgB,CAAC,SAAS,CAAC,EAC9C,kBAAkB,CAAC,gBAAgB,CAAC,MAAM,CAAC,EAC3C,kBAAkB,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAC3C,CAAC;iBACH;aACF;SACF;QAED,MAAM,EAAE,GAA6C,IAAI,mFAAwC,CAC/F,IAAI,CAAC,SAAS,EACd,OAAO,EACP,IAAI,CAAC,eAAe,EACpB,OAAO,EACP,SAAS,EACT,MAAM,EACN,KAAK,EACL,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,YAAY,EACjB,eAAe,EACf,IAAI,CAAC,SAAS,CACf,CAAC;QACF,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACtB,EAAE,CAAC,eAAe,EAAE,CAAC;YACrB,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC,YAAa,CAAC;SACtC;aAAM;YACL,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;SACvC;QACD,IAAI,eAAe,EAAE;YACnB,eAAe,CAAC,OAAO,GAAG,IAAI,CAAC;SAChC;QACD,OAAO,EAAE,CAAC;IACZ,CAAC;CACF;AAjFD,gDAiFC","sourcesContent":["import type { IQuadSource } from '@comunica/bus-rdf-resolve-quad-pattern';\nimport { KeysRdfResolveQuadPattern } from '@comunica/context-entries';\nimport type { IActionContext, IAggregatedStore, IDataSource } from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport type { AsyncIterator } from 'asynciterator';\nimport type { ISourcesState } from './LinkedRdfSourcesAsyncRdfIterator';\nimport type { IMediatorArgs } from './MediatedLinkedRdfSourcesAsyncRdfIterator';\nimport { MediatedLinkedRdfSourcesAsyncRdfIterator } from './MediatedLinkedRdfSourcesAsyncRdfIterator';\nimport { StreamingStoreMetadata } from './StreamingStoreMetadata';\n\n/**\n * A lazy quad source that creates {@link MediatedLinkedRdfSourcesAsyncRdfIterator} instances when matching quads.\n *\n * @see MediatedLinkedRdfSourcesAsyncRdfIterator\n */\nexport class MediatedQuadSource implements IQuadSource {\n  public readonly firstUrl: string;\n  public readonly forceSourceType?: string;\n  public readonly mediators: IMediatorArgs;\n\n  public sourcesState: ISourcesState;\n  public aggregateStore: boolean;\n\n  private readonly cacheSize: number;\n  private readonly maxIterators: number;\n\n  public constructor(cacheSize: number, firstUrl: string,\n    forceSourceType: string | undefined, maxIterators: number, aggregateStore: boolean, mediators: IMediatorArgs) {\n    this.cacheSize = cacheSize;\n    this.firstUrl = firstUrl;\n    this.forceSourceType = forceSourceType;\n    this.maxIterators = maxIterators;\n    this.aggregateStore = aggregateStore;\n    this.mediators = mediators;\n  }\n\n  public static nullifyVariables(term?: RDF.Term): RDF.Term | undefined {\n    return !term || term.termType === 'Variable' ? undefined : term;\n  }\n\n  public match(\n    subject: RDF.Term,\n    predicate: RDF.Term,\n    object: RDF.Term,\n    graph: RDF.Term,\n    context: IActionContext,\n  ): AsyncIterator<RDF.Quad> {\n    // Optimized match with aggregated store if enabled and started.\n    let aggregatedStore: IAggregatedStore | undefined;\n    if (this.aggregateStore) {\n      const aggregatedStores: Map<IDataSource, IAggregatedStore> | undefined = context\n        .get(KeysRdfResolveQuadPattern.hypermediaSourcesAggregatedStores);\n      if (aggregatedStores) {\n        aggregatedStore = aggregatedStores.get(this.firstUrl);\n        if (!aggregatedStore) {\n          aggregatedStore = new StreamingStoreMetadata(\n            undefined,\n            (acc, app) => it.accumulateMetadata(acc, app),\n          );\n          aggregatedStores.set(this.firstUrl, aggregatedStore);\n        }\n        if (aggregatedStore.started) {\n          return aggregatedStore.match(\n            MediatedQuadSource.nullifyVariables(subject),\n            MediatedQuadSource.nullifyVariables(predicate),\n            MediatedQuadSource.nullifyVariables(object),\n            MediatedQuadSource.nullifyVariables(graph),\n          );\n        }\n      }\n    }\n\n    const it: MediatedLinkedRdfSourcesAsyncRdfIterator = new MediatedLinkedRdfSourcesAsyncRdfIterator(\n      this.cacheSize,\n      context,\n      this.forceSourceType,\n      subject,\n      predicate,\n      object,\n      graph,\n      this.firstUrl,\n      this.maxIterators,\n      aggregatedStore,\n      this.mediators,\n    );\n    if (!this.sourcesState) {\n      it.setSourcesState();\n      this.sourcesState = it.sourcesState!;\n    } else {\n      it.setSourcesState(this.sourcesState);\n    }\n    if (aggregatedStore) {\n      aggregatedStore.started = true;\n    }\n    return it;\n  }\n}\n"]}