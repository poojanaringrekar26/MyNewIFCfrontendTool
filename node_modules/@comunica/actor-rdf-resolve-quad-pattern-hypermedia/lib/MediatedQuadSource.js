"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MediatedQuadSource = void 0;
const context_entries_1 = require("@comunica/context-entries");
const MediatedLinkedRdfSourcesAsyncRdfIterator_1 = require("./MediatedLinkedRdfSourcesAsyncRdfIterator");
const StreamingStoreMetadata_1 = require("./StreamingStoreMetadata");
/**
 * A lazy quad source that creates {@link MediatedLinkedRdfSourcesAsyncRdfIterator} instances when matching quads.
 *
 * @see MediatedLinkedRdfSourcesAsyncRdfIterator
 */
class MediatedQuadSource {
    constructor(cacheSize, firstUrl, forceSourceType, maxIterators, aggregateStore, mediators) {
        this.cacheSize = cacheSize;
        this.firstUrl = firstUrl;
        this.forceSourceType = forceSourceType;
        this.maxIterators = maxIterators;
        this.aggregateStore = aggregateStore;
        this.mediators = mediators;
    }
    static nullifyVariables(term) {
        return !term || term.termType === 'Variable' ? undefined : term;
    }
    match(subject, predicate, object, graph, context) {
        // Optimized match with aggregated store if enabled and started.
        let aggregatedStore;
        if (this.aggregateStore) {
            const aggregatedStores = context
                .get(context_entries_1.KeysRdfResolveQuadPattern.hypermediaSourcesAggregatedStores);
            if (aggregatedStores) {
                aggregatedStore = aggregatedStores.get(this.firstUrl);
                if (!aggregatedStore) {
                    aggregatedStore = new StreamingStoreMetadata_1.StreamingStoreMetadata(undefined, (acc, app) => it.accumulateMetadata(acc, app));
                    aggregatedStores.set(this.firstUrl, aggregatedStore);
                }
                if (aggregatedStore.started) {
                    return aggregatedStore.match(MediatedQuadSource.nullifyVariables(subject), MediatedQuadSource.nullifyVariables(predicate), MediatedQuadSource.nullifyVariables(object), MediatedQuadSource.nullifyVariables(graph));
                }
            }
        }
        const it = new MediatedLinkedRdfSourcesAsyncRdfIterator_1.MediatedLinkedRdfSourcesAsyncRdfIterator(this.cacheSize, context, this.forceSourceType, subject, predicate, object, graph, this.firstUrl, this.maxIterators, aggregatedStore, this.mediators);
        if (!this.sourcesState) {
            it.setSourcesState();
            this.sourcesState = it.sourcesState;
        }
        else {
            it.setSourcesState(this.sourcesState);
        }
        if (aggregatedStore) {
            aggregatedStore.started = true;
        }
        return it;
    }
}
exports.MediatedQuadSource = MediatedQuadSource;
//# sourceMappingURL=MediatedQuadSource.js.map