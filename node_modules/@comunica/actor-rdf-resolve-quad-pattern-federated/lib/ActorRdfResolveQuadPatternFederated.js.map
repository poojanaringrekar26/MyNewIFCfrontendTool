{"version":3,"file":"ActorRdfResolveQuadPatternFederated.js","sourceRoot":"","sources":["ActorRdfResolveQuadPatternFederated.ts"],"names":[],"mappings":";;;AAMA,yFAEgD;AAIhD,+DAA4D;AAE5D;;GAEG;AACH,MAAa,mCAAoC,SAAQ,+DAAgC;IAQvF,YAAmB,IAA8C;QAC/D,KAAK,CAAC,IAAI,CAAC,CAAC;QAHK,kBAAa,GAAiC,IAAI,GAAG,EAAE,CAAC;QAKzE,oGAAoG;QACpG,IAAI,CAAC,IAAI,CAAC,6BAA6B,EAAE;YACvC,IAAI,CAAC,6BAA6B,GAAS;gBACzC,KAAK,CAAC,OAAO,CAAC,MAAoC;oBAChD,IAAI,MAAM,CAAC,IAAI,KAAK,YAAY,EAAE;wBAChC,OAAO,EAAE,QAAQ,EAAE,EAAE,WAAW,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE,gBAAgB,EAAE,KAAK,EAAE,EAAC,CAAC;qBAC3F;oBAED,MAAM,QAAQ,GAAG,EAAE,GAAG,MAAM,CAAC,mBAAmB,EAAE,CAAC;oBACnD,MAAM,WAAW,GAAG,MAAM,CAAC,iBAAiB,CAAC;oBAC7C,IAAI,CAAC,WAAW,CAAC,WAAW,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE;wBAC/E,0DAA0D;wBAC1D,QAAQ,CAAC,WAAW,CAAC,IAAI,GAAG,UAAU,CAAC;wBACvC,QAAQ,CAAC,WAAW,CAAC,KAAK,GAAG,MAAM,CAAC,iBAAiB,CAAC;qBACvD;yBAAM;wBACL,IAAI,WAAW,CAAC,WAAW,CAAC,IAAI,KAAK,UAAU,EAAE;4BAC/C,QAAQ,CAAC,WAAW,CAAC,IAAI,GAAG,UAAU,CAAC;yBACxC;wBACD,QAAQ,CAAC,WAAW,CAAC,KAAK,IAAI,WAAW,CAAC,WAAW,CAAC,KAAK,CAAC;qBAC7D;oBACD,IAAI,QAAQ,CAAC,WAAW,IAAI,WAAW,CAAC,WAAW,EAAE;wBACnD,QAAQ,CAAC,WAAW,GAAG,QAAQ,CAAC,WAAW,IAAI,CAAC,CAAC;wBACjD,WAAW,CAAC,WAAW,GAAG,WAAW,CAAC,WAAW,IAAI,CAAC,CAAC;wBACvD,QAAQ,CAAC,WAAW,IAAI,WAAW,CAAC,WAAW,CAAC;qBACjD;oBACD,IAAI,QAAQ,CAAC,QAAQ,IAAI,WAAW,CAAC,QAAQ,EAAE;wBAC7C,QAAQ,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,IAAI,CAAC,CAAC;wBAC3C,WAAW,CAAC,QAAQ,GAAG,WAAW,CAAC,QAAQ,IAAI,CAAC,CAAC;wBACjD,QAAQ,CAAC,QAAQ,IAAI,WAAW,CAAC,QAAQ,CAAC;qBAC3C;oBACD,IAAI,WAAW,CAAC,gBAAgB,EAAE;wBAChC,QAAQ,CAAC,gBAAgB,GAAG,IAAI,CAAC;qBAClC;oBAED,OAAO,EAAE,QAAQ,EAAE,CAAC;gBACtB,CAAC;aACF,CAAC;SACH;IACH,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAAoC;QACpD,MAAM,OAAO,GAAG,IAAA,gDAAiB,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAClD,IAAI,CAAC,OAAO,EAAE;YACZ,MAAM,IAAI,KAAK,CAAC,SAAS,IAAI,CAAC,IAAI,iEAAiE,CAAC,CAAC;SACtG;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAES,KAAK,CAAC,SAAS,CAAC,OAAuB;QAC/C,OAAO,IAAI,yCAAmB,CAC5B,IAAI,CAAC,0BAA0B,EAC/B,IAAI,CAAC,6BAA6B,EAClC,OAAO,EACP,IAAI,CAAC,aAAa,EAClB,IAAI,CAAC,iBAAiB,CACvB,CAAC;IACJ,CAAC;CACF;AApED,kFAoEC","sourcesContent":["import type { MediatorRdfMetadataAccumulate,\n  IActionRdfMetadataAccumulate } from '@comunica/bus-rdf-metadata-accumulate';\nimport type {\n  IActionRdfResolveQuadPattern, IActorRdfResolveQuadPatternArgs,\n  IQuadSource, MediatorRdfResolveQuadPattern,\n} from '@comunica/bus-rdf-resolve-quad-pattern';\nimport {\n  ActorRdfResolveQuadPatternSource, getContextSources,\n} from '@comunica/bus-rdf-resolve-quad-pattern';\nimport type { IActorTest } from '@comunica/core';\nimport type { IActionContext, IDataSource } from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport { FederatedQuadSource } from './FederatedQuadSource';\n\n/**\n * A comunica Federated RDF Resolve Quad Pattern Actor.\n */\nexport class ActorRdfResolveQuadPatternFederated extends ActorRdfResolveQuadPatternSource\n  implements IActorRdfResolveQuadPatternFederatedArgs {\n  public readonly mediatorResolveQuadPattern: MediatorRdfResolveQuadPattern;\n  public readonly mediatorRdfMetadataAccumulate: MediatorRdfMetadataAccumulate;\n  public readonly skipEmptyPatterns: boolean;\n\n  protected readonly emptyPatterns: Map<IDataSource, RDF.Quad[]> = new Map();\n\n  public constructor(args: IActorRdfResolveQuadPatternFederatedArgs) {\n    super(args);\n\n    // TODO: remove this backwards-compatibility in the next major version, and make the param mandatory\n    if (!args.mediatorRdfMetadataAccumulate) {\n      this.mediatorRdfMetadataAccumulate = <any> {\n        async mediate(action: IActionRdfMetadataAccumulate) {\n          if (action.mode === 'initialize') {\n            return { metadata: { cardinality: { type: 'exact', value: 0 }, canContainUndefs: false }};\n          }\n\n          const metadata = { ...action.accumulatedMetadata };\n          const subMetadata = action.appendingMetadata;\n          if (!subMetadata.cardinality || !Number.isFinite(subMetadata.cardinality.value)) {\n            // We're already at infinite, so ignore any later metadata\n            metadata.cardinality.type = 'estimate';\n            metadata.cardinality.value = Number.POSITIVE_INFINITY;\n          } else {\n            if (subMetadata.cardinality.type === 'estimate') {\n              metadata.cardinality.type = 'estimate';\n            }\n            metadata.cardinality.value += subMetadata.cardinality.value;\n          }\n          if (metadata.requestTime || subMetadata.requestTime) {\n            metadata.requestTime = metadata.requestTime || 0;\n            subMetadata.requestTime = subMetadata.requestTime || 0;\n            metadata.requestTime += subMetadata.requestTime;\n          }\n          if (metadata.pageSize || subMetadata.pageSize) {\n            metadata.pageSize = metadata.pageSize || 0;\n            subMetadata.pageSize = subMetadata.pageSize || 0;\n            metadata.pageSize += subMetadata.pageSize;\n          }\n          if (subMetadata.canContainUndefs) {\n            metadata.canContainUndefs = true;\n          }\n\n          return { metadata };\n        },\n      };\n    }\n  }\n\n  public async test(action: IActionRdfResolveQuadPattern): Promise<IActorTest> {\n    const sources = getContextSources(action.context);\n    if (!sources) {\n      throw new Error(`Actor ${this.name} can only resolve quad pattern queries against a sources array.`);\n    }\n    return true;\n  }\n\n  protected async getSource(context: IActionContext): Promise<IQuadSource> {\n    return new FederatedQuadSource(\n      this.mediatorResolveQuadPattern,\n      this.mediatorRdfMetadataAccumulate,\n      context,\n      this.emptyPatterns,\n      this.skipEmptyPatterns,\n    );\n  }\n}\n\nexport interface IActorRdfResolveQuadPatternFederatedArgs extends IActorRdfResolveQuadPatternArgs {\n  /**\n   * The quad pattern resolve mediator.\n   */\n  mediatorResolveQuadPattern: MediatorRdfResolveQuadPattern;\n  /**\n   * The RDF metadata accumulate mediator.\n   */\n  mediatorRdfMetadataAccumulate?: MediatorRdfMetadataAccumulate;\n  /**\n   * If quad patterns that are sub-patterns of empty quad patterns should be skipped.\n   * This assumes that sources remain static during query evaluation.\n   * @default {false}\n   */\n  skipEmptyPatterns?: boolean;\n}\n"]}